import asyncio
import logging
from typing import Dict, List, Any
import pandas as pd
from utils.tech_indicators import rsi, macd, sma, ema, bbands  # if you have different names, keep your names
from utils.logger import log_event
from utils.forecaster import forecast_next
from chart.chart_data_loader import get_chart_data
from utils.volume_utils import detect_volume_spike
from chart.chart_pattern_detector import detect_chart_patterns
from utils.tech_indicators import get_trend_score, get_momentum_score
from chart.pump_pattern_classifier import detect_pump_signals
from chart.bitquery_analytics import get_bitquery_token
from chart.heatmap_optimizer import get_heatmap_boost
from memory.token_memory_index import update_chart_memory


class ChartCortex:
    """
    Firehose-first chart analysis cortex.
    - If `token_context["ohlcv"]` is provided, it will use it.
    - Otherwise it will fetch bars from chart_data_loader (which builds them from firehose memory).
    Exposes:
      - async analyze_token_async(token_context)
      - sync wrapper analyze_token(token_context)
    """

    def __init__(self, memory):
        self.memory = memory

    # -------- Public (sync wrapper, for legacy call-sites) --------
    def analyze_token(self, token_context: Dict[str, Any]) -> Dict[str, Any]:
        try:
            loop = asyncio.get_running_loop()
        except RuntimeError:
            return asyncio.run(self.analyze_token_async(token_context))
        else:
            return loop.run_until_complete(self.analyze_token_async(token_context))

    # -------- Primary async API --------
    async def analyze_token_async(self, token_context: Dict[str, Any]) -> Dict[str, Any]:
        token_address = token_context.get("token_address")
        mode = token_context.get("mode", "trade")
        interval = token_context.get("interval", "1m")
        lookback_bars = token_context.get("lookback_bars", 200)
        if not token_address:
            return self._empty_resp()

        ohlcv: List[Dict[str, Any]] = token_context.get("ohlcv")
        if not ohlcv:
            try:
                ohlcv = await get_chart_data(
                    token_address,
                    interval=interval,
                    lookback_bars=lookback_bars,
                    force_rebuild=False,
                )
            except Exception as e:
                logging.warning(f"[ChartCortex] Failed to pull OHLCV for {token_address}: {e}")
                return self._empty_resp()

        if not ohlcv:
            return self._empty_resp()

        chart_tags: List[str] = []

        # === Volume spike detection
        try:
            volume_spike = detect_volume_spike(ohlcv)
            volatility = volume_spike.get("volatility_level", "low") if volume_spike else "low"
            if volume_spike:
                chart_tags.append("volume_spike")
        except Exception as e:
            logging.warning(f"[ChartCortex] Volume spike detection failed: {e}")
            volume_spike = None
            volatility = "unknown"

        # === Pump signal detection
        try:
            pump_signals = detect_pump_signals(ohlcv)
            if pump_signals:
                chart_tags.extend(pump_signals.get("tags", []))
        except Exception as e:
            logging.warning(f"[ChartCortex] Pump pattern detection failed: {e}")

        # === Bitquery signal boost
        try:
            insight = await get_bitquery_token(token_address)
            if insight and insight.get("score", 0) > 0:
                chart_tags.append("bitquery_positive")
                bitquery_boost = insight.get("score", 0)
            else:
                bitquery_boost = 0
        except Exception as e:
            logging.warning(f"[ChartCortex] Bitquery insight failed: {e}")
            bitquery_boost = 0

        # === Heatmap boost (optional)
        try:
            heatmap_boost = get_heatmap_boost(token_address, interval)
            if heatmap_boost:
                chart_tags.append("heatmap_boosted")
        except Exception as e:
            logging.warning(f"[ChartCortex] Heatmap boost failed: {e}")
            heatmap_boost = 0

        # === Trade mode: full analysis
        if mode == "trade":
            try:
                patterns = detect_chart_patterns(ohlcv)
                trend = patterns.get("trend", "neutral")
                chart_tags.extend(patterns.get("tags", []))
            except Exception as e:
                logging.warning(f"[ChartCortex] Pattern detection failed: {e}")
                patterns = {}
                trend = "neutral"

            try:
                trend_score = get_trend_score(ohlcv)
            except Exception as e:
                logging.warning(f"[ChartCortex] get_trend_score failed: {e}")
                trend_score = 0.0

            try:
                momentum_score = get_momentum_score(ohlcv)
            except Exception as e:
                logging.warning(f"[ChartCortex] get_momentum_score failed: {e}")
                momentum_score = 0.0

            chart_score = trend_score + momentum_score + bitquery_boost + heatmap_boost
            if volume_spike:
                chart_score += 5

        # === Snipe mode: simplified analysis
        else:
            trend = "unknown"
            try:
                momentum_score = get_momentum_score(ohlcv)
            except Exception as e:
                logging.warning(f"[ChartCortex] get_momentum_score failed: {e}")
                momentum_score = 0.0

            chart_score = momentum_score + bitquery_boost + heatmap_boost
            if volume_spike:
                chart_score += 3

        # === Memory writeback
        try:
            update_chart_memory(token_address, {
                "trend": trend,
                "momentum": momentum_score,
                "volatility": volatility,
                "score": chart_score,
                "tags": chart_tags
            })
        except Exception as e:
            logging.warning(f"[ChartCortex] Failed to update chart memory: {e}")

        return {
            "trend": trend,
            "momentum": momentum_score,
            "volatility": volatility,
            "chart_score": round(chart_score, 2),
            "chart_tags": chart_tags,
            "interval": interval,
            "bars_used": len(ohlcv),
        }
    

    # -------- Helpers --------
    @staticmethod
    def _empty_resp() -> Dict[str, Any]:
        return {
            "trend": "unknown",
            "momentum": 0.0,
            "volatility": "unknown",
            "chart_score": 0,
            "chart_tags": []
        }
